function [Rmc,slmc] = spo2ida_get_Rmc(mc,b0,b1);
%
% [Rmc,slmc] = spo2ida_get_Rmc(mc,b0,b1);
% Given the b0,b1 parameters of all the fractile IDA curves 
% (calculated using the spo2ida_get_ab_pXX(a)) we also calculate
% the R-value and local tangent slope at any given ductility "m"
% along the 3 IDAs. In all cases we are actually interested in
% getting the R-value at "end-of-hardening"
%
% Last updated: April 26th, 2002

% FIXED : Major issue with lRmc2 screwing the Rmc value for 84% IDA
% when a>0.8 (which causes b1<0, as dictated by the CORRECT fit!).
% FIXED : When b1==0, the Rmc is now calculated correctly.
  
%keyboard;


% Calculate the (diakrinousa)
Delta = b0.^2 + 4*b1*log(mc) ;
% solution 1 
if b1~=0
  % Solution of 2nd order polynomial
  lRmc1 = ( -b0 + sqrt(Delta) ) ./ (2*b1) ;
else
  % solution of 1st order polynomial
  lRmc1 = log(mc)/b0;
end  
% solution 2 : Probably always negative, as b0,b1 are always positive
%lRmc2 = ( -b0 - sqrt(Delta) ) ./ (2*b1) ;

% CAREFUL : Rmc and slmc are arranged according to 16%, 50%, 84%
% lines, not by capacity fractiles. So Rmc(1) goes to 16% line,
% but it is the 84% fractile capacity. Same goes for the slopes.

% Bad approach. For a>0.8, b1(3)<0, so lRmc2 >lRmc1 >0 !!!
% Unfortunately then the line below would pick lRmc2 for the 84%
% IDA, and this proves disastrous for the plot. The reason is that
% now the pXX for 84% is a parabola mu=parabola(R) with it's axis
% of symmetry parallel to mu-axis and turning the focal point
% towards m=-Inf. So there are two R-values that generate the same
% mu, but one of them is simply huge.
% So discard this
%Rmc=exp(max([lRmc1;lRmc2]));
% and use this

Rmc=exp(lRmc1);


% the slope dmu/dR at R=Rmc in the linear-domain. This is what I
% was using before, but I think I now prefer the log-domain.
%slmc=(b0 + b1*2.*log(Rmc)).*(mc./Rmc);
% the slope d(lm)/d(lR) at R=Rmc in the log-domain.
slmc=b0 + b1*2.*log(Rmc);
