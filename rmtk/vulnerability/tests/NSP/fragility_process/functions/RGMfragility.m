function [Sa50,bTSa,bRSa]=RGMfragility(dy,dlim,buthd,T,Gamma,du,g,N)
% Estimate fragility parameters for an MDOF system approximated by an equivalent
% SDOF and using the R-mu-T relationships of Ruiz-Garcia & Miranda (2007).
%____________________________________________________________________________
% INPUT
% Cy     : base shear coefficient at yield (presently covered by Gamma and dy)
%          Cy = Say/g = Vy/W, where Say=Sa @ yield, Vy = base shear @ yield
% dlim  : median roof displacement value that defines the fragility. It can result 
%          from any EDP but it should be expressed in terms of the (median)
%          corresponding roof disp (just like we always do in pushovers anyway)
% dy    : roof yield displacement
% buthd  : dispersion (std of log data) characterizing the lognormal
%          distribution of "limit-state roof drift capacity" around dlim
% T      : ESDOF period (sec)
% Gamma  : the participation factor for the roof displacement(>1) 
% du    : ultimate displacement on the backbone.
% g      : the value of "g" in units compatible with T and dlim, dy.
%          The default is 9.81m/s2, assuming that dy and dlim are in meters.
% N      : Number of realizations to use for Monte Carlo when buthd>0 to
%          incorporate extra uncertainty due to a non-deterministic dlim
%          threshold. If N=0 is provided, a simpler approximation is used
%          instead that is not based on Monte Carlo but on closed form
%          expressions.
% OUTPUT
% Sa50   : the median Sa for the fragility, in units of "g"
% bTSa   : the total dispersion, including capacity and demand dispersions.
% bRSa   : the dispersion due to record-to-record variability (i.e. demand only)
%_____________________________________________________________________________
%
% Created 16/May/2014 by D.Vamvatsikos
% Updated 25/Dec/2014: Added du as an optional ultimate displacement. Helps a
%         lot to limit large dlim values. Added the MC method for introducing
%         dlim uncertainty and fixed the approximate approach by making sure the
%         uncertainty is not included if dlim exceeds du (i.e., we are in the
%         collapse range).  
%
% NOTES
% If you set a dlim close but lower than du, the ultimate displacement, this
% will correctly influence the results if you use the MC method. Otherwise, you
% will see a difference only when dlim<du and dlim>du. In the first case, we
% include buthd while in the latter we do not. Clearly an approximation.
% 
% 
% EXAMPLE
% T=1; Gamma=1.3; 
% dlim=0.35; dy=0.1; du=0.4; %(in meters)
% buthd=0.2;
% % Monte Carlo based estimate
% [Sa50,bTSa]=RGMfragility(dy,dlim,buthd,T,Gamma,du)
% % Closed form approximation
% [Sa50,bTSa]=RGMfragility(dy,dlim,buthd,T,Gamma,du,[],0)
if nargin<8, N=25; end;
if nargin<7||isempty(g), g=9.81; end
if nargin<6||isempty(du), du=Inf; end
if nargin<5, error('need at least 5 arguments'); end

% This is inferred from the paper, where the authors suggest different
% tendencies than what has been fitted for T<0.15sec. There is also an upper
% limit of 3.0 but the structure of the coefficient expressions is such that CR
% goes to 1.0 and there should be no problem. Still, the beta of Cr would keep
% decreasing with period, so it would be nice to warn the user
if T<0.15, error('T must be larger than 0.15sec'); end
if T>3, warning('T>3 is not advised, but let us proceed'); end


% set plotflag=1 for visual help with debugging
plotflag=0;


% median roof displacement value for defining fragility is higher than the
% ultimate one. Replace it by the ultimate (they will both correspond to
% collapse so it makes sense). Still, keep a flag to signify this change as in
% such cases you had better not include buthd in the fragility of collapse 
% if using the approximate method. MC will take care of it automatically!
if dlim>du
   noUncApproxflag=1;
   dlim=du;
else
   noUncApproxflag=0;
end


mlim=dlim/dy;

c=79.12*T.^1.98;

R50=0.5*(1-c+sqrt(c.^2+2*c.*(2*mlim-1)+1));
% The SA value at yield
Say=4*pi^2*dy./(g*Gamma.*T.^2);


% the expressions seem to have been fitted for R<=6. Still, allow the user to
% proceed at own risk.
if R50>6, warning('R > 6 not advised, proceeding anyway'); end 

if buthd>0 && N>0
   Nr=50;
   R=[0,linspace(1,2*R50,Nr)];
   CR50i=1 + (R-1)/(79.12*T^1.98);
   bCR50i=1.957*(1/5.876+1./(11.749*(T+0.1))).*(1-exp(-0.739*(R-1)));
   mu50=R.*CR50i;
   mu16=mu50.*exp(-bCR50i);
   mu84=mu50.*exp(bCR50i);
   if plotflag
      figure(1);clf;hold on
      plot(mu16,R,mu50,R,mu84,R); grid on
   end
   % Monte Carlo approach
   xp=linspace( 1./(2*N),1-1./(2*N), N);
   musample=logninv(xp,log(mlim),buthd);
   % any mlim that exceeds mf should obviously produce the same results as mf,
   % so take it down to mf to avoid complaints for extrapolation later.
   muf=du/dy;
   musample(musample>muf)=muf;
   % Estimate R-values of Sa50 and bRSa that correspond to mlim samples.
   x=[mu16;mu50;mu84];
   for j=1:3
      rMC(j,:)=interp1(x(j,:),R,musample);
      if plotflag
         %show all the sampled values for mlim on the plot for each fractile IDA
         plot(musample,rMC(j,:),'ro')
      end
   end
   
   Sai=zeros(1,N*N);
   % this is to compute the better estimate, still it is much different from above
   % estimates (at least for most cases that I have tried).
   allSa50=rMC(2,:)*Say;
   allbSa50=0.5*(log(rMC(1,:))-log(rMC(3,:)));
   for i=1:N
      % for each potential (equiprobable) sample of mlim, get a sample of
      % Sa-values as if we actually had N separate IDA curves, distributed
      % according to the Sa50 and bSa50 values extracted above. In other words,
      % generate N Sa-capacities for N different mlim realizations.
      if allbSa50(i)>0
         Sai((i-1)*N+1:i*N)=logninv(xp,log(allSa50(i)),allbSa50(i));
      else
         % no dispersion, set the values equal to the median. Unfortunately,
         % logninv would produce a NaN.
         Sai((i-1)*N+1:i*N)=allSa50(i);
      end
   end

   % Get the median and stdlog values of the entire sample of Sa capacities
   Sa50=median(Sai);
   bTSa=std(log(Sai));

else
   % Simplified approach.
   % Go to an R value at 85% of the R50 for a biased estimate of "b", the local
   % slope in log-log of the median IDA.
   Rlim=max(0.85*R50,1.00001);
   b=1+log(1+(Rlim-1)./c)./log(Rlim);
   bthd=1.957*(1/5.876+1./(11.749*(T+0.1))).*(1-exp(-0.739*(Rlim-1)));

   CR50 = 1 + (R50-1)/(79.12*T^1.98);
   Sa50 = 4*pi^2*dlim./(g*Gamma.*CR50.*T.^2);
   bRSa = bthd/b;
   
   if noUncApproxflag
      % dlim was greater than du. In such cases it makes little sense to
      % include the dispersion of dlim in the total dispersion. The reason is
      % that we are already at collapse, so changes in dlim have no effect at
      % all. The MC approach takes care of this automatically. Obviously this
      % remains a rough binary approximation (include / don't include) for dlim
      % values close to du. 
      bTSa = bRSa;
   else
      bTSa = sqrt(bthd.^2 + buthd.^2)./b;
   end
end
