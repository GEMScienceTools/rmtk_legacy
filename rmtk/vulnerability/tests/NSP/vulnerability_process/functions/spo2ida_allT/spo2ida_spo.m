function [spoc,hspo]=spo2ida_spo(mc,a,ac,r,mf,plotflag,linew,fontsize,lstyle,lcolor)
%------------------------------------------------------
% A vary general routine aimed to supplement my various SPO2IDA
% routines by providing the plotting and calculating the points of
% the SPO only
% 
% 
% INPUT
%  mc    : mu of end of hardening slope
%  a     : hardening slope in [0,1]
%  ac    : negative (capping) slope in [-e-20, -2] (for now)
%  r     : Residual plateau height, a fraction of Fy
%  mf    : fracturing mu (end of SPO)
%  plotflag : if non-zero, plot the curve, otherwise not.
%             use figure(plotflag) for the plotting
% lstyle : line style (default = solid)
% lcolor : line color (default = blue)
% OUTPUT
%  spoc.m, spoc.r : The SPO curve points in normalized m,r coords
%  hspo           : the handle to the plotted curve
%-------------------------------------------------------
% Created  29/Sep 2001, Copyright (c) D.Vamvatsikos
% Upgraded 25/Feb/2009: SPO slope labels are now plotted with
%          verticalalignment set to "bottom". This improves them
%          a lot.
% Upgraded 03/May/2009: Fixed "if r==0" to "if r==0 && mf>spoc.m(4)"
%         The original line was wrong. IF you had r=0 and a low mf that
%         should cut into the softening segment, it would destroy this and
%         make that segment appear as if it was ending at R=0 and mu=mf. 
%         Now it is correct! Also added optional parameters lcolor and
%         lstyle.
%
% This is a mirror routine of my Excel spreadsheet 
%  "Stick1tall - SPO to IDA model.xls". It is simply done into Matlab.

% The SPO we are using can be defined by 6 points only. The
% complete curve is piecewise linear, the corners given by the
% points in spoc.

% NOTE : This is a remarkably stable procedure. Can take any value
% of mf

if nargin<10, lcolor=[]; end
if nargin<9, lstyle='-'; end
if nargin<8, fontsize=11; end
if nargin<7, linew=2; end
if nargin<6, plotflag=0; end

ac=abs(ac);

spoc.m=zeros(6,1);spoc.r=zeros(6,1);

% First compute the SPO
% end of Elasticity points
spoc.m(2)=1; spoc.r(2)=1;
% End of hardening points
spoc.m(3)=min(mc,mf); spoc.r(3)=1+(spoc.m(3)-1)*a;
% End of softening points
spoc.m(4)=min(mf,spoc.m(3)-(r-spoc.r(3))/ac);
if r==0 && mf>spoc.m(4)
  spoc.r(4)=0;
else
  % actually this formula works always, but when r==0, it will
  % produce spoc.r(4)=(some very small number) due to round off
  % errors. This if-statement saves us from this problem, which will
  % haunt us later in the plotting.
  spoc.r(4)=spoc.r(3)-(spoc.m(4)-spoc.m(3))*ac;
end  
% End of plateau points
spoc.r(5)=r ; spoc.m(5)=mf;
% collapse
spoc.m(6)=mf;


[pXX,mXX,rXX]=regions2model(a, mc, ac, r, mf);


% now plot if asked to.
if plotflag
  figure(plotflag)
  % problem for plots: If mf>mend for the trilinears, then the spo
  % continues at zero force all the way to mf. We would like it to
  % stop earlier.
  indy=find(spoc.r==0);
  % the first time R=0 is right at the first point (0,0). We DO
  % want that plotted. We also want the last one plotted too. So
  % plot everything up to and including the 2nd time R becomes zero!
  if ~isempty(lcolor)
     hspo=plot(spoc.m(1:indy(2)),spoc.r(1:indy(2)),lstyle,'color',lcolor,'linew',linew);
  else
     % no color was specified. Unless included in lstyle (e.g. 'b-') it
     % will be the default of blue.
     hspo=plot(spoc.m(1:indy(2)),spoc.r(1:indy(2)),lstyle,'linew',linew);
  end
  set(gca,'box','on','fontsize',fontsize)
  hold on
  
  % if the corresponding segments appear, plot the a,ac and r values!
  
  if pXX
    text((spoc.m(2)+spoc.m(3))/2,(spoc.r(2)+spoc.r(3))/2,...
	 sprintf('\\bf %0.3g%%',a*100),'verticalalign','bottom')
  end
  if mXX
    text((spoc.m(3)+spoc.m(4))/2,(spoc.r(3)+spoc.r(4))/2,...
	 sprintf('\\bf %0.3g%%',-abs(ac)*100),'verticalalign','bottom')
  end
  if rXX
    text((spoc.m(4)+spoc.m(5))/2,spoc.r(4),...
	 sprintf('\\bf %0.3g%%',r*100),'verticalalign','bottom')
  end  
  grid on
  %xlabel('ductility \mu = \theta / \theta _y');
  xlabel('ductility, \mu = \delta / \delta ^{yield}');
  ylabel('strength reduction factor, R = S_a / S_a^{yield}');
end