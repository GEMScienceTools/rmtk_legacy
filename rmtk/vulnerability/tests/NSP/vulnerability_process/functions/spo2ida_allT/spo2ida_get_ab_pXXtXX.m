function [b0,b1]=spo2ida_get_ab_pXXtXX(a,T,pw)
% function [b0,b1]=spo2ida_get_ab_pXX(a)
%
% simply calculates the b0,b1 coefficients for the moderate period
% pXX
%_________________________________________________________________
%
% Last updated: Sep 21st, 2001

% default is 50-50 weights. pw is the pinching model weight.
if nargin<3, pw=0.5; end

[pb0,pb1]=spo2ida_get_pinch50_ab_pXXtXX(a,T);
[mb0,mb1]=spo2ida_get_mclough_ab_pXXtXX(a,T);

% Now average out the b0,b1 results from the two possible models.
b0 = pw*pb0 + (1-pw)*mb0;
b1 = pw*pb1 + (1-pw)*mb1;








function [b0,b1]=spo2ida_get_pinch50_ab_pXXtXX(a,T)
% FITS FOR pinch50 !!!
% THEY HAVE BEEN UPDATED TO BE SOMEWHAT BETTER
% NOTE THAT the MCLOUGH ONES HAVE NOT BEEN UPDATED!
%                16        50        84
%fb0_pXXtXX=[  -0.5027   -0.0955    0.2649
%              -0.0542   -0.0316    0.0818
%               0.0181    0.0291   -0.1250
%               0.8058    0.3737   -0.0954
%               0.2037    0.2334    0.5720
%              -0.2572   -0.3683   -0.5508
%              -0.3675   -0.3041   -0.1600
%              -0.1520   -0.1985   -0.6344
%               0.2258    0.3128    0.6418];

fb0_pXXtXX=[  -0.9309    0.0288    0.2987
               0.4300   -0.1718    0.0438
	      -0.2934    0.1189   -0.1008
	       0.3409   -0.0986   -0.0267
	       0.7201    0.8073    0.0962
	       0.3105   -0.2548    0.3569
	      -0.3343   -0.0561   -0.4138
	       0.0778   -0.3430   -0.1510
	       0.1358   -0.8500   -0.4004
	      -0.7301    0.4165   -0.3644
	       0.6055   -0.0806    0.4698
	      -0.4094    0.4322    0.1895];

fb1_pXXtXX=[   0.1151   -0.4671   -0.5994
	      -0.0940    0.4071    0.2858
	       0.0539   -0.2373   -0.1310
	       0.0073    0.4093    0.4984
	      -0.4092   -1.0761   -0.9235
	       0.1534    0.7899    0.5074
	       0.0216   -0.2518   -0.0910
	       0.1651    0.6914    0.7160
	       0.2733    1.5106    1.5379
	      -0.0338   -1.1673   -0.7999
	      -0.0801    0.4927    0.2387
	      -0.1586   -1.0815   -1.2277];

  
    
%fb1_pXXtXX=[  0.1246    0.0480    0.0277
%             -0.1045   -0.1747   -0.4226
%              0.0605    0.1364    0.3241
%             -0.1989   -0.2105   -0.0297
%             -0.0822   -0.1916   -0.5081
%              0.1711    0.3816    0.5662
%              0.0713    0.1533   -0.0010
%              0.1925    0.3689    0.9434
%             -0.2237   -0.4964   -0.8851];

    

% note: the pXX fits are quite good

% the full model for any of the three fractiles is:
% lm = b0*lR + b1*lR^2 (1)
% or  mu = exp ( b0*logR + b1*logR^2)
%   log(b0)   = P_{-1:2}(logT) * P_{0,0.5,1}(a)
%   log(b1+1) = P_{-1:2}(logT) * P_{0,0.5,1}(a)


% parameters are always mu-independent. That's how we fit them

%X=[1, log(T), log(T)^2,...
%   a, a*log(T),a*log(T)^2,...
%   sqrt(a),sqrt(a)*log(T),sqrt(a)*log(T)^2];


X=[ones(size(T)), log(T), log(T).^2, log(T+1).^-1,... 
   a, a.*log(T), a.*log(T).^2, a.*log(T+1).^-1,...
   sqrt(a),sqrt(a).*log(T),sqrt(a).*log(T).^2,...
   sqrt(a).*log(T+1).^-1];

b0 = exp(X*fb0_pXXtXX); %eq (7)
b1 = exp(X*fb1_pXXtXX)-1 ; %eq (8) b1 = gamma




function [b0,b1]=spo2ida_get_mclough_ab_pXXtXX(a,T)
% FITS FOR mclough. NOW READY! 
% but not updated as the pinch50 ones. Those new ones are better.
%                16        50        84
fb0_pXXtXX=[  -0.6157   -0.1842    0.2155
	       0.0260   -0.0027    0.0760
	       0.0140    0.0215   -0.1458
	       0.8605    0.4986    0.1693
	       0.2264    0.2026    0.4712
	      -0.3041   -0.3542   -0.7131
	      -0.3316   -0.3536   -0.3827
	      -0.2613   -0.2011   -0.5240
	       0.2689    0.3055    0.8093];

    
fb1_pXXtXX=[   0.1433    0.0882    0.0552
	      -0.1074   -0.1635   -0.3562
	       0.0538    0.1062    0.2745
	      -0.1705   -0.1486   -0.1009
	      -0.0813   -0.1489   -0.3903
	       0.1661    0.2618    0.5810
	       0.0313    0.0587    0.0363
	       0.1957    0.3185    0.7552
	      -0.2086   -0.3550   -0.8369];

    

% note: the pXX fits are quite good

% the full model for any of the three fractiles is:
% lm = b0*lR + b1*lR^2 (1)
% or  mu = exp ( b0*logR + b1*logR^2)
%   b0=( as for pinch )
%   b1= (as for pinch)


% parameters are always mu-independent. That's how we fit them


X=[1, log(T), log(T)^2,...
   a, a*log(T),a*log(T)^2,...
   sqrt(a),sqrt(a)*log(T),sqrt(a)*log(T)^2];

b0 = exp(X*fb0_pXXtXX);
b1 = exp(X*fb1_pXXtXX)-1 ;


