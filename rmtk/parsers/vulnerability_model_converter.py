#!/usr/bin/env python
# LICENSE
#
# Copyright (c) 2014, GEM Foundation, Anirudh Rao
#
# The rmtk is free software: you can redistribute
# it and/or modify it under the terms of the GNU Affero General Public
# License as published by the Free Software Foundation, either version
# 3 of the License, or (at your option) any later version.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake. If not, see <http://www.gnu.org/licenses/>
#
# DISCLAIMER
#
# The software rmtk provided herein is released as a prototype
# implementation on behalf of scientists and engineers working within the GEM
# Foundation (Global Earthquake Model).
#
# It is distributed for the purpose of open collaboration and in the
# hope that it will be useful to the scientific, engineering, disaster
# risk and software design communities.
#
# The software is NOT distributed as part of GEM's OpenQuake suite
# (http://www.globalquakemodel.org/openquake) and must be considered as a
# separate entity. The software provided herein is designed and implemented
# by scientific staff. It is not developed to the design standards, nor
# subject to same level of critical review by professional software
# developers, as GEM's OpenQuake software suite.
#
# Feedback and contribution to the software is welcome, and can be
# directed to the risk scientific staff of the GEM Model Facility
# (risk@globalquakemodel.org).
#
# The nrml_converters is therefore distributed WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# The GEM Foundation, and the authors of the software, assume no liability for
# use of the software.
"""
Convert vulnerability model csv files to xml.
"""

import os
import argparse
import pandas as pd
from lxml import etree

NAMESPACE = 'http://openquake.org/xmlns/nrml/0.4'
GML_NAMESPACE = 'http://www.opengis.net/gml'
SERIALIZE_NS_MAP = {None: NAMESPACE, 'gml': GML_NAMESPACE}

def csv_to_xml(input_csv, output_xml):
    """
    Converts the CSV vulnerability model file to the NRML format
    """
    data = pd.io.parsers.read_csv(input_csv)
    grouped_by_set = data.groupby(['vuln_set_id','vuln_func_id'])
    vuln_model = {}
    for (vuln_set_id, vuln_func_id), group in grouped_by_set:
        if vuln_set_id not in vuln_model:
            vuln_model[vuln_set_id] = {}
            vuln_model[vuln_set_id]['asset_cat'] = group['asset_cat'].tolist()[0]
            vuln_model[vuln_set_id]['loss_cat'] = group['loss_cat'].tolist()[0]
            vuln_model[vuln_set_id]['imt'] = group['imt'].tolist()[0]
            vuln_model[vuln_set_id]['iml'] = group['iml'].tolist()
            vuln_model[vuln_set_id]['functions'] = []

        vuln_func = {}
        vuln_func['vuln_func_id'] = vuln_func_id
        vuln_func['distr'] = group['distr'].tolist()[0]
        vuln_func['mean_lr'] = group['mean_lr'].tolist()
        vuln_func['stddev_lr'] = group['stddev_lr'].tolist()

        vuln_model[vuln_set_id]['functions'].append(vuln_func)

    with open(output_xml, "w") as f:
        root = etree.Element('nrml', nsmap=SERIALIZE_NS_MAP)
        node_vm = etree.SubElement(root, "vulnerabilityModel")
        for vuln_set_id, vuln_func_set in vuln_model.iteritems():
            node_dvs = etree.SubElement(node_vm, "discreteVulnerabilitySet")
            node_dvs.set("vulnerabilitySetID", vuln_set_id)
            node_dvs.set("assetCategory", vuln_func_set['asset_cat'])
            node_dvs.set("lossCategory", vuln_func_set['loss_cat'])
            node_iml = etree.SubElement(node_dvs, "IML")
            node_iml.set("IMT", vuln_func_set['imt'])
            node_iml.text = " ".join(map(str, vuln_func_set['iml']))

            for vuln_func in vuln_func_set['functions']:
                node_dvf = etree.SubElement(node_dvs, "discreteVulnerability")
                node_dvf.set("vulnerabilityFunctionID", vuln_func['vuln_func_id'])
                node_dvf.set("probabilisticDistribution", vuln_func['distr'])
                node_lr = etree.SubElement(node_dvf, "lossRatio")
                node_lr.text = " ".join(map(str, vuln_func['mean_lr']))
                node_cv = etree.SubElement(node_dvf, "coefficientsVariation")
                node_cv.text = " ".join(map(str, vuln_func['stddev_lr']))

        f.write(etree.tostring(root, pretty_print=True, xml_declaration=True, encoding='UTF-8'))

def xml_to_csv (input_xml, output_csv):
    """
    Converts the XML vulnerability model file to the CSV format
    """
    print('This feature will be implemented in a future release.')


def set_up_arg_parser():
    """
    Can run as executable. To do so, set up the command line parser
    """

    description = ('Convert a Vulnerability Model from CSV to XML and '
                   'vice versa.\n\nTo convert from CSV to XML: '
                   '\npython vulnerability_model_converter.py '
                   '--input-csv-file PATH_TO_VULNERABILITY_MODEL_CSV_FILE '
                   '--output-xml-file PATH_TO_OUTPUT_XML_FILE'
                   '\n\nTo convert from XML to CSV type: '
                   '\npython vulnerability_model_converter.py '
                   '--input-xml-file PATH_TO_VULNERABILITY_MODEL_XML_FILE '
                   '--output-csv-file PATH_TO_OUTPUT_CSV_FILE')

    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawTextHelpFormatter)
    flags = parser.add_argument_group('flag arguments')

    group_input = flags.add_mutually_exclusive_group(required=True)
    group_input.add_argument('--input-xml-file',
                       help='path to vulnerability model XML file',
                       default=None)
    group_input.add_argument('--input-csv-file',
                       help='path to vulnerability model CSV file',
                       default=None)

    group_output = flags.add_mutually_exclusive_group()
    group_output.add_argument('--output-xml-file',
                              help='path to output XML file',
                              default=None,
                              required=False)
    group_output.add_argument('--output-csv-file',
                              help='path to output CSV file',
                              default=None,
                              required=False)
    return parser


if __name__ == "__main__":

    parser = set_up_arg_parser()
    args = parser.parse_args()
    if args.input_csv_file:
        if args.output_xml_file:
            output_file = args.output_xml_file
        else:
            (filename, ext) = os.path.splitext(args.input_csv_file)
            output_file = filename + '.xml'
        csv_to_xml(args.input_csv_file, output_file)
    elif args.input_xml_file:
        if args.output_csv_file:
            output_file = args.output_csv_file
        else:
            (filename, ext) = os.path.splitext(args.input_xml_file)
            output_file = filename + '.csv'
        xml_to_csv(args.input_xml_file, output_file)
    else:
        parser.print_usage()